---
import BaseLayout from "../../layouts/BaseLayout.astro";
import "../../styles/minimal-blog.css";
import Terminal from "../../components/Terminal";
import { getCollection, type CollectionEntry, getEntry } from "astro:content"; // Added getEntry
import { marked } from "marked";
import * as Prism from "prismjs";
import "prismjs/components/prism-javascript.js";
import "prismjs/components/prism-markup.js";

marked.setOptions({
  gfm: true,
  highlight(code, lang) {
    const grammar = Prism.languages[lang] || Prism.languages.javascript;
    return Prism.highlight(code, grammar, lang);
  },
} as any);

import type {
  BlogPostContent,
  AboutContent,
  ProjectContent
} from "../../interfaces";

// --- Fetch and process Blog Posts (existing code) ---
const allBlogEntries: CollectionEntry<"blogs">[] = await getCollection("blogs");
const blogPosts: BlogPostContent[] = await Promise.all(
  allBlogEntries.map(async (entry) => {
    const rawHtml = await marked(entry.body);
    const codeBlockRegex =
      /<pre><code class="language-(\w+)">([\s\S]*?)<\/code><\/pre>/g;
    const extractedCodeBlocks: { language: string; code: string }[] = [];
    let match;
    let htmlForPlainText = rawHtml;
    while ((match = codeBlockRegex.exec(rawHtml)) !== null) {
      const language = match[1];
      let code = match[2];
      code = code
        .replace(/&amp;/g, "&")
        .replace(/&lt;/g, "<")
        .replace(/&gt;/g, ">")
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .trim();
      extractedCodeBlocks.push({ language, code });
      htmlForPlainText = htmlForPlainText.replace(match[0], "");
    }
    const plainTextRaw = htmlForPlainText
      .replace(/<[^>]+>/g, "")
      .trim();
    const plainTextContent = plainTextRaw
      .split("\n")
      .map((line: string) => line.trim())
      .filter((line: string) => line.length > 0);

    return {
      slug: entry.slug,
      title: entry.data.title,
      author: entry.data.author,
      date: entry.data.date.toISOString().split("T")[0],
      summary: entry.data.summary,
      content: plainTextContent,
      codeBlocks:
        extractedCodeBlocks.length > 0 ? extractedCodeBlocks : undefined,
    };
  }),
);


let aboutMeContent: AboutContent = { title: "About Me", bodyLines: ["Failed to load about content."] };

try {
    const aboutEntry = await getEntry('about', 'index'); // Assuming your file is src/content/about/index.md
    if (aboutEntry) {
        // Split the raw Markdown body by paragraphs (separated by blank lines)
        const markdownParagraphs = aboutEntry.body.split(/\n\s*\n/);

        const htmlBodyLines = await Promise.all(
            markdownParagraphs.map(async (mdPara) => {
                if (mdPara.trim() === '') return ''; // Handle potentially empty strings from split
                // Convert each Markdown paragraph to HTML
                // marked() typically wraps paragraphs in <p>...</p>.
                // We'll remove these outer <p> tags as each item in bodyLines will be a "line" or block in the terminal.
                let htmlLine = await marked(mdPara.trim());
                htmlLine = htmlLine.replace(/^<p>/i, '').replace(/<\/p>$/i, '').trim();
                return htmlLine;
            })
        );

        aboutMeContent = {
            title: aboutEntry.data.title || "About Me",
            // Filter out any completely empty lines that might result from multiple blank lines in Markdown
            bodyLines: htmlBodyLines.filter(line => line.length > 0),
        };
    }
} catch (error) {
    console.error("Error fetching or processing 'about' content:", error);
    // aboutMeContent remains the default error message
}

// --- Fetch and process Projects ---
const allProjectEntries: CollectionEntry<"projects">[] = await getCollection("projects");
const projects: ProjectContent[] = await Promise.all(
  allProjectEntries.map(async (entry) => {
    // Process the body of the project markdown, similar to "About Me"
    let content: string[] = [];
    if (entry.body) {
      const markdownParagraphs = entry.body.split(/\n\s*\n/);
      content = await Promise.all(
        markdownParagraphs.map(async (mdPara) => {
          if (mdPara.trim() === '') return '';
          let htmlLine = await marked(mdPara.trim());
          // Remove outer <p> tags if marked adds them and you want raw lines
          htmlLine = htmlLine.replace(/^<p>/i, '').replace(/<\/p>$/i, '').trim();
          return htmlLine;
        })
      );
      content = content.filter(line => line.length > 0);
    }
    return {
      name: entry.data.name,
      description: entry.data.description, // This is the short description from frontmatter
      githubUrl: entry.data.githubUrl || "",
      liveUrl: entry.data.liveUrl,
      content: content, // This will be the processed body content

      // const htmlDetails = await marked(entry.body);
      // const textDetails = htmlDetails.replace(/<[^>]+>/g, '').trim().split('\n').filter(line => line.length > 0);
      // details: textDetails,
    };
  })
);


---
<!-- src/pages/minimal-blog.astro -->
<BaseLayout
  title="BlogLabs - Minimal TUI"
  description="A minimal terminal UI for BlogLabs."
>
  <Terminal client:load blogPosts={blogPosts} aboutContent={aboutMeContent} projects={projects} />
</BaseLayout>
